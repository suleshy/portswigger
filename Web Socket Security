                                     ## Testing for WebSockets security vulnerabilities
# WebSockets are widely used in modern web applications. They are initiated over HTTP and provide long-lived connections with asynchronous communication in both directions. 

# WebSockets are used for all kinds of purposes, including performing user actions and transmitting sensitive information.Virtually any web security vulnerability that arises with regular HTTP can also arise in relation to WebSockets communications.

                                      ## Definition of websocket
# WebSockets are a bi-directional, full duplex communications protocol initiated over HTTP. They are commonly used in modern web applications for streaming data and other asynchronous traffic.

                                     ## What is the difference between HTTP and WebSockets?
# With HTTP, the client sends a request and the server returns a response. Typically, the response occurs immediately, and the transaction is complete.Even if the network connection stays open, this will be used for a separate transaction of a request and a response. 

# Some modern web sites use WebSockets. WebSocket connections are initiated over HTTP and are typically long-lived

# Messages can be sent in either direction at any time and are not transactional in nature. The connection will normally stay open and idle until either the client or the server is ready to send a message. 

# WebSockets are particularly useful in situations where low-latency or server-initiated messages are required, such as real-time feeds of financial data. 


                                   ## How are WebSocket connections established?
                                   
WebSocket connections are normally created using client-side JavaScript like the following: 
--------> var ws = new WebSocket("wss://normal-website.com/chat");

NOTE: The wss protocol establishes a WebSocket over an encrypted TLS connection, while the ws protocol uses an unencrypted connection. 


To establish the connection, the browser and server perform a WebSocket handshake over HTTP.
The browser issues a WebSocket handshake request like the following: 

GET /chat HTTP/1.1
Host: normal-website.com
Sec-WebSocket-Version: 13
Sec-WebSocket-Key: wDqumtseNBJdhkihL6PW7w==
Connection: keep-alive, Upgrade
Cookie: session=KOsEJNuflw4Rd9BDNrVmvwBF9rEijeE2
Upgrade: websocket

 If the server accepts the connection, it returns a WebSocket handshake response like the following: 
 
HTTP/1.1 101 Switching Protocols
Connection: Upgrade
Upgrade: websocket
Sec-WebSocket-Accept: 0FFP+2nmNIf/h+4BP36k9uzrYGk=

Note

Several features of the WebSocket handshake messages are worth noting: 

# The Connection and Upgrade headers in the request and response indicate that this is a WebSocket handshake. 
# The Sec-WebSocket-Version request header specifies the WebSocket protocol version that the client wishes to use. This is typically 13. 
# The Sec-WebSocket-Key request header contains a Base64-encoded random value, which should be randomly generated in each handshake request. 
# The Sec-WebSocket-Accept response header contains a hash of the value submitted in the Sec-WebSocket-Key request header, concatenated with a specific string defined in the protocol specification.
--> This is done to prevent misleading responses resulting from misconfigured servers or caching proxies. 

                            ## What do WebSocket messages look like?
# Once a WebSocket connection has been established, messages can be sent asynchronously in either direction by the client or server. 
-----> Example: ws.send("Peter Wiener");

# In principle, WebSocket messages can contain any content or data format. In modern applications, it is common for JSON to be used to send structured data within WebSocket messages. 

# For example, a chat-bot application using WebSockets might send a message like the following: 
----->{"user":"Hal Pline","content":"I wanted to be a Playstation growing up, not a device to answer your inane questions"}




                     ## Manipulating WebSocket traffic
# Finding WebSockets security vulnerabilities generally involves manipulating them in ways that the application doesn't expect. You can do this using Burp Suite. 
#  You can use Burp Suite to: 
----------------------------> Intercepting and modifying WebSocket messages
----------------------------> Replay and generate new WebSocket messages. 
----------------------------> Manipulate WebSocket connections. 

                     # Intercepting and modifying WebSocket messages
1. Open Burp's browser. 
2. Browse to the application function that uses WebSockets. You can determine that WebSockets are being used by using the application and looking for entries appearing in the WebSockets history tab within Burp Proxy. 
3. In the Intercept tab of Burp Proxy, ensure that interception is turned on. 
4. When a WebSocket message is sent from the browser or server, it will be displayed in the Intercept tab for you to view or modify. Press the Forward button to forward the message. 

                      # Replaying and generating new WebSocket messages
As well as intercepting and modifying WebSocket meIn the "History" panel within Burp Repeater, you can view the history of messages that have been transmitted over the WebSocket connection. This includes messages that you have generated in Burp Repeater, and also any that were generated by the browser or server via the same connection. ssages on the fly, you can replay individual messages and generate new messages. 
You can do this using Burp Repeater:   

1.  In Burp Proxy, select a message in the WebSockets history, or in the Intercept tab, and choose "Send to Repeater" from the context menu. 
2.  In Burp Repeater, you can now edit the message that was selected, and send it over and over. 
3.  You can enter a new message and send it in either direction, to the client or server. 
4.  In the "History" panel within Burp Repeater, you can view the history of messages that have been transmitted over the WebSocket connection. This includes messages that you have generated in Burp Repeater, and also any that were generated by the browser or server via the same connection. 
5.  If you want to edit and resend any message in the history panel, you can do this by selecting the message and choosing "Edit and resend" from the context menu. 

                      # Manipulating WebSocket connections
As well as manipulating WebSocket messages, it is sometimes necessary to manipulate the WebSocket handshake that establishes the connection. 

     # There are various situations in which manipulating the WebSocket handshake might be necessary: 
1. It can enable you to reach more attack surface.
2. Some attacks might cause your connection to drop so you need to establish a new one. 
3. Tokens or other data in the original handshake request might be stale and need updating. 

You can manipulate the WebSocket handshake using Burp Repeater: 
1. Send a WebSocket message to Burp Repeater 
2. In Burp Repeater, click on the pencil icon next to the WebSocket URL. This opens a wizard that lets you attach to an existing connected WebSocket, clone a connected WebSocket, or reconnect to a disconnected WebSocket. 
3. If you choose to clone a connected WebSocket or reconnect to a disconnected WebSocket, then the wizard will show full details of the WebSocket handshake request, which you can edit as required before the handshake is performed. 
4. When you click "Connect", Burp will attempt to carry out the configured handshake and display the result. If a new WebSocket connection was successfully established, you can then use this to send new messages in Burp Repeater. 

                         ## WebSockets security vulnerabilities
# In principle, practically any web security vulnerability might arise in relation to WebSockets:
# User-supplied input transmitted to the server might be processed in unsafe ways, leading to vulnerabilities such as SQL injection or XML external entity injection. 
# Some blind vulnerabilities reached via WebSockets might only be detectable using out-of-band (OAST) techniques. 
# If attacker-controlled data is transmitted via WebSockets to other application users, then it might lead to XSS or other client-side vulnerabilities. 

     

                         ## Manipulating WebSocket messages to exploit vulnerabilities
# For example, suppose a chat application uses WebSockets to send chat messages between the browser and the server. When a user types a chat message, a WebSocket message like the following is sent to the server: 
--> Example: {"message":"Hello Carlos"}

# The contents of the message are transmitted (again via WebSockets) to another chat user, and rendered in the user's browser as follows: 
---> <td>Hello Carlos</td>

#  In this situation, provided no other input processing or defenses are in play, an attacker can perform a proof-of-concept XSS attack by submitting the following WebSocket message: 
---> {"message":"<img src=1 onerror='alert(1)'>"}






