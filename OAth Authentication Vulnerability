# While browsing the web, you've almost certainly come across sites that let you log in using your social media account. The chances are that this feature is built using the popular OAuth 2.0 framework. OAuth 2.0 is highly interesting for attackers because it is both extremely common and inherently prone to implementation mistakes. This can result in a number of vulnerabilities, allowing attackers to obtain sensitive user data and potentially bypass authentication completely. 

                                       ## What is OAuth?
   
# OAuth is a commonly used authorization framework that enables websites and web applications to request limited access to a user's account on another application.

                                       ## How does OAuth 2.0 work?
            Client application - The website or web application that wants to access the user's data.                                        
            Resource owner - The user whose data the client application wants to access. 
            OAuth service provider - The website or application that controls the user's data and access to it. They support OAuth by providing an API for interacting with both an authorization server and a resource server. 

# There are numerous different ways that the actual OAuth process can be implemented. These are known as OAuth "flows" or "grant types".     

 -----> OAuth authentication is generally implemented as follows:
                        1. The user chooses the option to log in with their social media account. The client application then uses the social media site's OAuth service to request access to some data that it can use to identify the user. This could be the email address that is registered with their account, for example. 
                        2. After receiving an access token, the client application requests this data from the resource server, typically from a dedicated /userinfo endpoint. 
                        3. Once it has received the data, the client application uses it in place of a username to log the user in. The access token that it received from the authorization server is often used instead of a traditional password.
                        
EXAMPLE:
      1. In Burp, go to "Proxy" > "HTTP history" and study the requests and responses that make up the OAuth flow. This starts from the authorization request GET /auth?client_id=[...]. 
      2. Notice that the client application (the blog website) receives some basic information about the user from the OAuth service. It then logs the user in by sending a POST request containing this information to its own /authenticate endpoint, along with the access token. 
      3. Send the POST /authenticate request to Burp Repeater. In Repeater, change the email address to carlos@carlos-montoya.net and send the request. Observe that you do not encounter an error. 
      4. Right-click on the POST request and select "Request in browser" > "In original session". Copy this URL and visit it in the browser. You are logged in as Carlos and the lab is solved. 
      

                                   ## How do OAuth authentication vulnerabilities arise?
  # OAuth authentication vulnerabilities arise partly because the OAuth specification is relatively vague and flexible by design. 
  
                                   ## Identifying OAuth authentication
 # Recognizing when an application is using OAuth authentication is relatively straightforward. If you see an option to log in using your account from a different website, this is a strong indication that OAuth is being used. 
 # Regardless of which OAuth grant type is being used, the first request of the flow will always be a request to the /authorization endpoint containing a number of query parameters that are used specifically for OAuth. 
 
 # In particular, keep an eye out for the client_id, redirect_uri, and response_type parameters. For example, an authorization request will usually look something like this: 
              EXAMPLE: GET /authorization?client_id=12345&redirect_uri=https://client-app.com/callback&response_type=token&scope=openid%20profile&state=ae13d489bd00e3c24 HTTP/1.1
                       Host: oauth-authorization-server.com
 
                               ## Recon
 # Doing some basic recon of the OAuth service being used can point you in the right direction when it comes to identifying vulnerabilities. 
 # If an external OAuth service is used, you should be able to identify the specific provider from the hostname to which the authorization request is sent.
 
    Once you know the hostname of the authorization server, you should always try sending a GET request to the following standard endpoints: 
          1. /.well-known/oauth-authorization-server
          2. /.well-known/openid-configuration
          
# These will often return a JSON configuration file containing key information, such as details of additional features that may be supported.
# This will sometimes tip you off about a wider attack surface and supported features that may not be mentioned in the documentation. 

                      ## Exploiting OAuth authentication vulnerabilities
                      
