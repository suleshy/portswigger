# While browsing the web, you've almost certainly come across sites that let you log in using your social media account. The chances are that this feature is built using the popular OAuth 2.0 framework. OAuth 2.0 is highly interesting for attackers because it is both extremely common and inherently prone to implementation mistakes. This can result in a number of vulnerabilities, allowing attackers to obtain sensitive user data and potentially bypass authentication completely. 

                                       ## What is OAuth?
   
# OAuth is a commonly used authorization framework that enables websites and web applications to request limited access to a user's account on another application.

                                       ## How does OAuth 2.0 work?
            Client application - The website or web application that wants to access the user's data.                                        
            Resource owner - The user whose data the client application wants to access. 
            OAuth service provider - The website or application that controls the user's data and access to it. They support OAuth by providing an API for interacting with both an authorization server and a resource server. 

# There are numerous different ways that the actual OAuth process can be implemented. These are known as OAuth "flows" or "grant types".     

 -----> OAuth authentication is generally implemented as follows:
                        1. The user chooses the option to log in with their social media account. The client application then uses the social media site's OAuth service to request access to some data that it can use to identify the user. This could be the email address that is registered with their account, for example. 
                        2. After receiving an access token, the client application requests this data from the resource server, typically from a dedicated /userinfo endpoint. 
                        3. Once it has received the data, the client application uses it in place of a username to log the user in. The access token that it received from the authorization server is often used instead of a traditional password.
                        
