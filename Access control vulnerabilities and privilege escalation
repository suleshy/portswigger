# Access control vulnerabilities and privilege escalation

   What is access control?
# Access control (or authorization) is the application of constraints on who (or what) can perform attempted actions or access resources that they have requested. 
In the context of web applications, access control is dependent on authentication and session management: 
     Authentication identifies the user and confirms that they are who they say they are. 
     Session management identifies which subsequent HTTP requests are being made by that same user. 
     Access control determines whether the user is allowed to carry out the action that they are attempting to perform. 
     
# An ACCESS COTROL SECURITY MODEL is a formally defined definition of a set of access control rules that is independent of technology or implementation platform.

# Access control security models are implemented within operating systems, networks, database management systems and back office, application and web server softwar

# Vertical access controls
-----> Vertical access controls are mechanisms that restrict access to sensitive functionality that is not available to other types of users. 

# Horizontal access controls
----> Horizontal access controls are mechanisms that restrict access to resources to the users who are specifically allowed to access those resources. 

With horizontal access controls, different users have access to a subset of resources of the same type. For example, a banking application will allow a user to view transactions and make payments from their own accounts, but not the accounts of any other user. 

# Context-dependent access controls restrict access to functionality and resources based upon the state of the application or the user's interaction with it. 

           # 1. Examples of broken access controls
   
# 1.1 Vertical privilege escalation
-----> If a user can gain access to functionality that they are not permitted to access then this is vertical privilege escalation. 

# 1.2 Unprotected functionality

# 1.3 Unprotected admin functionality with unpredictable URL

# 1.4 Parameter-based access control methods
-----> EXAMPLE: https://insecure-website.com/login/home.jsp?admin=true
                https://insecure-website.com/login/home.jsp?role=1
                {"email":"szdiof1@gmail.com", "roleid": 2}
                
# 1.5 Broken access control resulting from platform misconfiguration
-------> Some application frameworks support various non-standard HTTP headers that can be used to override the URL in the original request, such as X-Original-URL and X-Rewrite-URL.
        EXAMPLE:   POST / HTTP/1.1
                   X-Original-URL: /admin/deleteUser
                    ...

                          ## 1.6 Horizontal privilege escalation
  Horizontal privilege escalation arises when a user is able to gain access to resources belonging to another user, instead of their own resources of that type.
  For example, if an employee should only be able to access their own employment and payroll records, but can in fact also access the records of other employees, then this is horizontal privilege escalation. 
   
    In some applications, the exploitable parameter does not have a predictable value. 
    For example, instead of an incrementing number, an application might use globally unique identifiers (GUIDs) to identify users.
    
                      ## 1.7 Horizontal to vertical privilege escalation
 Often, a horizontal privilege escalation attack can be turned into a vertical privilege escalation, by compromising a more privileged user.
 
                   ## 1.8 Insecure direct object references
 Insecure direct object references (IDOR) are a subcategory of access control vulnerabilities.
 
            ## 1.9  Access control vulnerabilities in multi-step processes
 Many web sites implement important functions over a series of steps.
 This is often done when a variety of inputs or options need to be captured, or when the user needs to review and confirm details before the action is performed.           
 
                          1. Load form containing details for a specific user.
                          2. Submit changes.
                          3. Review the changes and confirm. 
                          
                 ## 1.10 Referer-based access control   
  Some websites base access controls on the Referer header submitted in the HTTP request.
  The Referer header is generally added to requests by browsers to indicate the page from which a request was initiated. 
  
  
  
  
