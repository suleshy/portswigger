                                                    ## 1. Examples of business logic vulnerabilities
# 1.1 Excessive trust in client-side controls
---->A fundamentally flawed assumption is that users will only interact with the application via the provided web interface.

# 1.2 Failing to handle unconventional input
---->One aim of the application logic is to restrict user input to values that adhere to the business rules. 

   EXAMPLE: Consider the code below.
                 
                  $transferAmount = $_POST['amount'];
                  $currentBalance = $user->getBalance();
 
                 if ($transferAmount <= $currentBalance) {
                     // Complete the transfer
                 } else {
                     // Block the transfer: insufficient funds
                 }
                 
if the logic doesn't sufficiently prevent users from supplying a negative value in the amount parameter, this could be exploited by an attacker to both bypass the balance check and transfer funds in the "wrong" direction. If the attacker sent -$1000 to the victim's account, this might result in them receiving $1000 from the victim instead. 
The logic would always evaluate that -1000 is less than the current balance and approve the transfer.  


                                                ## 2.Making flawed assumptions about user behavior
                            
 # 2.1 Trusted users won't always remain trustworthy
 ---->EXAMPLE: Sometimes the RESET token mybe vulnerable by not using the reset token Value during PASSWORD RESET, So if you manage to successfully reset this value you my change the username
 and login as other user.
 
 # 2.2 Users won't always follow the intended sequence
 ---->EXAMPLE:Order the product then check the confirmation request in burp->proxy->history, if you add another item to your CART and  Resend this "GET /cart/order-confirmation?order-confirmation=true " request to Burp Repeater You will notice that you can buy another item in using the same amount. 
 
