                                              ## What is the DOM?
                                              
# The Document Object Model (DOM) is a web browser's hierarchical representation of the elements on the page. 
# Websites can use JavaScript to manipulate the nodes and objects of the DOM, as well as their properties
# DOM-based vulnerabilities arise when a website contains JavaScript that takes an attacker-controllable value, known as a source, and passes it into a dangerous function, known as a sink. 

                                               ## Taint-flow vulnerabilities
                                               
====> Many DOM-based vulnerabilities can be traced back to problems with the way client-side code manipulates attacker-controllable data.                                                

    # What is taint flow?
    
====> To either exploit or mitigate these vulnerabilities, it is important to first familiarize yourself with the basics of taint flow between sources and sinks.


     <> SOURCES
     
# A source is a JavaScript property that accepts data that is potentially attacker-controlled.
# An example of a source is the location.search property because it reads input from the query string, which is relatively simple for an attacker to control
# Ultimately, any property that can be controlled by the attacker is a potential source.
# This includes the referring URL (exposed by the document.referrer string), the user's cookies (exposed by the document.cookie string), and web messages. 

   
   <> SINKS
   
# A sink is a potentially dangerous JavaScript function or DOM object that can cause undesirable effects if attacker-controlled data is passed to it.
# For example, the eval() function is a sink because it processes the argument that is passed to it as JavaScript.
# An example of an HTML sink is document.body.innerHTML because it potentially allows an attacker to inject malicious HTML and execute arbitrary JavaScript.




# Fundamentally, DOM-based vulnerabilities arise when a website passes data from a source to a sink, which then handles the data in an unsafe way in the context of the client's session. 

Example: 
                                                        goto = location.hash.slice(1)
                                                        if (goto.startsWith('https:')) {
                                                          location = goto;
                                                        }
Explanation:
-----> This is vulnerable to DOM-based open redirection because the location.hash source is handled in an unsafe way.  
-----> If the URL contains a hash fragment that starts with https:, this code extracts the value of the location.hash property and sets it as the location property of the window.

<> An attacker could exploit this vulnerability by constructing the following URL: 
--------> https://www.innocent-website.com/example#https://www.evil-user.net

                                                  ## Common sources
                                                  
# The following are typical sources that can be used to exploit a variety of taint-flow vulnerabilities: 

                                                      document.URL
                                                      document.documentURI
                                                      document.URLUnencoded
                                                      document.baseURI
                                                      location
                                                      document.cookie
                                                      document.referrer
                                                      window.name
                                                      history.pushState
                                                      history.replaceState
                                                      localStorage
                                                      sessionStorage
                                                      IndexedDB (mozIndexedDB, webkitIndexedDB, msIndexedDB)
                                                      Database
                                                      
                                                      
                                                      
                                                    ## DOM-based XSS
                                                    
# DOM-based XSS vulnerabilities usually arise when JavaScript takes data from an attacker-controllable source, such as the URL, and passes it to a sink that supports dynamic code execution, such as eval() or innerHTML.
# This enables attackers to execute malicious JavaScript, which typically allows them to hijack other users' accounts. 
# The most common source for DOM XSS is the URL, which is typically accessed with the window.location object. 

                                                    ## How to test for DOM-based cross-site scripting
                                                    
# The majority of DOM XSS vulnerabilities can be found quickly and reliably using Burp Suite's web vulnerability scanner.
# To test for DOM-based cross-site scripting manually, you generally need to use a browser with developer tools, such as Chrome.
# You need to work through each available source in turn, and test each one individually. 

                                      
                                                      ## Testing HTML sinks
                                                      
# To test for DOM XSS in an HTML sink, place a random alphanumeric string into the source (such as location.search), then use developer tools to inspect the HTML and find where your string appears. 

NOTE: Note that the browser's "View source" option won't work for DOM XSS testing because it doesn't take account of changes that have been performed in the HTML by JavaScript.

# Note that browsers behave differently with regards to URL-encoding, Chrome, Firefox, and Safari will URL-encode location.search and location.hash, while IE11 and Microsoft Edge (pre-Chromium) will not URL-encode these sources.

# If your data gets URL-encoded before being processed, then an XSS attack is unlikely to work.

                                                ## Testing JavaScript execution sinks
                                                
# Testing JavaScript execution sinks for DOM-based XSS is a little harder.
# With these sinks, your input doesn't necessarily appear anywhere within the DOM, so you can't search for it.
# Instead you'll need to use the JavaScript debugger to determine whether and how your input is sent to a sink.


                                             
                                                ## Testing for DOM XSS using DOM Invader
                                                
# Identifying and exploiting DOM XSS in the wild can be a tedious process, often requiring you to manually trawl through complex, minified JavaScript.
# If you use Burp's browser, however, you can take advantage of its built-in DOM Invader extension, which does a lot of the hard work for you.    


                                               ## Exploiting DOM XSS with different sources and sinks
# In principle, a website is vulnerable to DOM-based cross-site scripting if there is an executable path via which data can propagate from source to sink.

<> The document.write sink works with script elements, so you can use a simple payload, such as the one below: 
    ---> document.write('... <script>alert(document.domain)</script> ...');
 

                                                    
